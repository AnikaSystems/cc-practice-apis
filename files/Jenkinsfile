pipeline {
    agent { label'ec2-agent' }
    options {
        skipStagesAfterUnstable()
    }
    stages {
        stage('Clone repository') {
            steps {
                script{
                    def scmVars = checkout scm
                    GIT_COMMIT = scmVars.GIT_COMMIT.substring(0,6)
                    GIT_COMMIT_MSG = scmVars.GIT_COMMIT_MSG
                    GIT_BRANCH_FULL = scmVars.GIT_BRANCH
                    GIT_BRANCH_LONG = scmVars.GIT_BRANCH.split('/')[1..-1].join('/')
                    GIT_BRANCH_SHORT = scmVars.GIT_BRANCH.split('/')[-1]

                    GIT_HYBRID = GIT_BRANCH_SHORT + "-" + GIT_COMMIT
                    
                    GIT_AUTHOR_COMMITTER = ""
                    GIT_COMMIT_MSG = ""
                    for (changeLogSet in currentBuild.changeSets) {
                        for (entry in changeLogSet.items) {
                            // Get details from the latest entry
                            GIT_AUTHOR_COMMITTER = entry.author.toString()
                            GIT_COMMIT_MSG = entry.msg.toString()
                        }
                    }
                    
                    echo "GIT_COMMIT: ${GIT_COMMIT}"
                    echo "GIT_COMMIT_MSG: ${GIT_COMMIT_MSG}"
                    echo "GIT_AUTHOR_COMMITTER: ${GIT_AUTHOR_COMMITTER}"
                    echo "GIT_BRANCH_FULL: ${GIT_BRANCH_FULL}"
                    echo "GIT_BRANCH_LONG: ${GIT_BRANCH_LONG}"
                    echo "GIT_BRANCH_SHORT: ${GIT_BRANCH_SHORT}"
                    echo "GIT_HYBRID: ${GIT_HYBRID}"
                }
            }
        }

        stage('Build') { 
            steps { 
                script{
                    currentBuild.displayName = "${env.BUILD_NUMBER}"+"-"+"${GIT_COMMIT}"+"-"+"${GIT_BRANCH_SHORT}"
                    currentBuild.description = "Updated by "+ GIT_AUTHOR_COMMITTER + " : " + GIT_COMMIT_MSG
                    app = docker.build("cc-files:${env.BUILD_NUMBER}", "-f files/Dockerfile .")
                }
            }
        }

        stage('Test'){
            steps {
                script {
                    docker.image('maven:3.9.6-amazoncorretto-17').inside('-v local-dist:/app/dist') {
                        sh 'mvn -f files/pom.xml test'
                        junit 'files/target/surefire-reports/*.xml'
                    }
                }
            }
        }

        stage('SonarQube analysis') {
            steps {
                script {
                    withSonarQubeEnv() {
                        docker.image('maven:3.9.6-amazoncorretto-17').inside('-v local-dist:/app/dist') {
                            sh "mvn clean verify sonar:sonar -DskipTests -Dsonar.projectKey=cc-practice-apis-files -Dsonar.projectName='cc-practice-apis-files'"
                        }
                    }
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script{
                    docker.withRegistry("https://${env.ECR_FQDN}", "ecr:${env.DEPLOY_REGION}:aws-rapid-jenkins-user") {
                        app.push("${env.BUILD_NUMBER}")
                        app.push ("${GIT_BRANCH_SHORT}")
                        app.push("${GIT_COMMIT}")
                        app.push("${GIT_HYBRID}")
                        app.push("latest")
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    echo "Run Trivy Image Scanner"
                    sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /scan-results:/output aquasec/trivy image -f json -o /output/cc-files-image-scan.json cc-files:${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Trivy Secret Scan') {
            steps {
                script {
                    echo "Run Trivy GitHub Repo Scanner"
                    echo "Scanning on branch: ${GIT_BRANCH_LONG}"
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GITHUB_PAT', usernameVariable: 'DUMMY_USER')]) {
                        sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -e GITHUB_TOKEN=${GITHUB_PAT} aquasec/trivy repo github.com/AnikaSystems/cc-practice-apis --branch ${GIT_BRANCH_LONG} --scanners secret"
                    }
                }
            }
        }

        stage('Archive scan results into AWS s3') {
            steps {
                script {
                    def s3path = "cc-practice-apis/file/${GIT_BRANCH_SHORT}/${env.BUILD_NUMBER}/"
                    echo "Pushing files to: ${s3path}"

                    withAWS(region:env.DEPLOY_REGION,credentials:"aws-rapid-jenkins-user") {
                        s3Delete(bucket:env.PIPELINE_BUCKET_NAME, path:s3path)
                        s3Upload(bucket:env.PIPELINE_BUCKET_NAME, workingDir:'/scan-results/', path:s3path, includePathPattern:'**/*');
                    }
                    
                }
                
                
            }
        }

        stage('Helm Verify') {
            steps {
                script {
                    sh "KUBECONFIG=~/.kube/dev-eks.config helm template files files/chart/files --set rev=${GIT_COMMIT}  --set image.tag=${GIT_HYBRID}"
                    sh "KUBECONFIG=~/.kube/dev-eks.config helm upgrade --install -n app files files/chart/files --set rev=${GIT_COMMIT}  --set image.tag=${GIT_HYBRID} --dry-run=server"
                }
            }
        }  

        stage('Deploy to DEV') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    input 'Deploy to DEV?'
                }
                script {
                    sh "KUBECONFIG=~/.kube/dev-eks.config helm upgrade --install -n app files files/chart/files --set rev=${GIT_COMMIT} --set image.tag=${GIT_HYBRID}"
                    sh "KUBECONFIG=~/.kube/dev-eks.config helm fullstatus -n app files"
                }
            }
        }  

        stage('Deploy to TEST') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    input 'Deploy to TEST?'
                }
                script {
                    sh "KUBECONFIG=~/.kube/test-eks.config helm upgrade --install -n app files files/chart/files --set rev=${GIT_COMMIT} --set image.tag=${GIT_HYBRID}"
                    sh "KUBECONFIG=~/.kube/test-eks.config helm fullstatus -n app files"
                }
            }
        }  

        stage('Deploy to PROD') {
            when {
                expression {
                    branch "release/*"
                }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    input 'Deploy to PROD?'
                }
                script {
                    sh "KUBECONFIG=~/.kube/prod-eks.config helm upgrade --install -n app files files/chart/files --set rev=${GIT_COMMIT} --set image.tag=${GIT_HYBRID}"
                    sh "KUBECONFIG=~/.kube/prod-eks.config helm fullstatus -n app files"
                }
            }
        }  

    }
}
