pipeline {
    agent { label'ec2-agent' }
    tools {
        maven 'maven 3.9.6' // This is the name of the Maven installation configured in Jenkins
    }
    options {
        skipStagesAfterUnstable()
    }
    stages {
         stage('Clone repository') { 
            steps { 
                script{
                    def scmVars = checkout scm
                    echo "GIT_COMMIT: ${scmVars.GIT_COMMIT}"
                    echo "GIT_BRANCH: ${scmVars.GIT_BRANCH}"
                }
            }
        }

        stage('Build') { 
            steps { 
                script{
                 sh 'mvn dependency:go-offline'
                 sh 'mvn package'
                 app = docker.build("cc-cases:${env.BUILD_NUMBER}", "-f cases/Dockerfile .")
                }
            }
        }

        stage('Test (JUnit / Jacoco)'){
            steps {
                script {
                    echo "Run Unit Tests"
                }
            }
        }

        stage('SonarQube analysis') {
            steps {
                script {
                    withSonarQubeEnv() {
                        echo "Run SonarQube Scanner"
                    }
                }
            }
        }

        stage('Deploy to ECR') {
            steps {
                script{
                    def BRANCH_NAME = GIT_BRANCH.split('/')[-1]
                    println("BRANCH_NAME=${BRANCH_NAME}")

                    docker.withRegistry("https://${env.ECR_FQDN}", "ecr:${env.DEPLOY_REGION}:aws-rapid-jenkins-user") {
                        app.push("${env.BUILD_NUMBER}")
                        app.push ("${BRANCH_NAME}")
                        app.push("${GIT_COMMIT}")
                        app.push("latest")
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    echo "Run Trivy Image Scanner"
                    sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image -f json -o /output/case-image-scan-results.json cc-cases:${env.BUILD_NUMBER}"
                }
            }
        }

        stage('archiving artifacts into AWS s3') {
            steps {
                script {
                    def BRANCH_NAME = GIT_BRANCH.split('/')[-1]

                    def s3path = "cc-practice-apis/case/${BRANCH_NAME}/${env.BUILD_NUMBER}/"
                    echo "Pushing files to: ${s3path}"

                    withAWS(region:env.DEPLOY_REGION,credentials:"aws-rapid-jenkins-user") {
                        s3Delete(bucket:env.PIPELINE_BUCKET_NAME, path:s3path)
                        s3Upload(bucket:env.PIPELINE_BUCKET_NAME, workingDir:'/scan-results/', path:s3path, includePathPattern:'**/*');
                    }
                    
                }
                
                
            }
        }

        stage('Trivy Secret Scan') {
            steps {
                script {
                    echo "Run Trivy GitHub Repo Scanner"
                    def BRANCH_NAME = GIT_BRANCH.split('/')[1..-1].join('/')
                    echo "Scanning on branch: ${BRANCH_NAME}"
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GITHUB_PAT', usernameVariable: 'DUMMY_USER')]) {
                        sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -e GITHUB_TOKEN=${GITHUB_PAT} aquasec/trivy repo github.com/AnikaSystems/cc-practice-apis --branch ${BRANCH_NAME} --scanners secret"
                    }
                }
            }
        }
    }
}
