pipeline {
    agent { label'ec2-agent' }
    tools {
        maven 'maven 3.9.6'
    }
    options {
        skipStagesAfterUnstable()
    }
    stages {
         stage('Clone repository') { 
            steps { 
                script{
                    def scmVars = checkout scm
                    GIT_COMMIT = scmVars.GIT_COMMIT.substring(0,6)
                    GIT_COMMIT_MSG = scmVars.GIT_COMMIT_MSG
                    GIT_BRANCH_FULL = scmVars.GIT_BRANCH
                    GIT_BRANCH_LONG = scmVars.GIT_BRANCH.split('/')[1..-1].join('/')
                    GIT_BRANCH_SHORT = scmVars.GIT_BRANCH.split('/')[-1]
                    echo "GIT_COMMIT: ${GIT_COMMIT}"
                    echo "GIT_COMMIT_MSG: ${GIT_COMMIT_MSG}"
                    echo "GIT_BRANCH_FULL: ${GIT_BRANCH_FULL}"
                    echo "GIT_BRANCH_LONG: ${GIT_BRANCH_LONG}"
                    echo "GIT_BRANCH_SHORT: ${GIT_BRANCH_SHORT}"
                }
            }
        }

        stage('Build') { 
            steps { 
                script{
                    currentBuild.displayName = "${env.BUILD_NUMBER}"+"-"+"GIT_COMMIT"+"-"+"${GIT_BRANCH_SHORT}"
                    currentBuild.description = "${GIT_COMMIT_MSG}"
                    sh 'mvn -f cases/pom.xml dependency:go-offline'
                    sh 'mvn -f cases/pom.xml package'
                    app = docker.build("cc-cases:${env.BUILD_NUMBER}", "-f cases/Dockerfile .")
                }
            }
        }

        stage('Test'){
            steps {
                script {
                    sh 'mvn -f cases/pom.xml test'
                    junit 'cases/target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube analysis') {
            steps {
                script {
                    withSonarQubeEnv() {
                        echo "Run SonarQube Scanner"
                    }
                }
            }
        }

        stage('Deploy to ECR') {
            steps {
                script{
                    docker.withRegistry("https://${env.ECR_FQDN}", "ecr:${env.DEPLOY_REGION}:aws-rapid-jenkins-user") {
                        app.push("${env.BUILD_NUMBER}")
                        app.push ("${GIT_BRANCH_SHORT}")
                        app.push("${GIT_COMMIT}")
                        app.push("latest")
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    echo "Run Trivy Image Scanner"
                    sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /scan-results:/output aquasec/trivy image -f json -o /output/cc-cases-image-scan.json cc-cases:${env.BUILD_NUMBER}"
                }
            }
        }

        stage('archiving artifacts into AWS s3') {
            steps {
                script {
                    def s3path = "cc-practice-apis/case/${GIT_BRANCH_SHORT}/${env.BUILD_NUMBER}/"
                    echo "Pushing files to: ${s3path}"

                    withAWS(region:env.DEPLOY_REGION,credentials:"aws-rapid-jenkins-user") {
                        s3Delete(bucket:env.PIPELINE_BUCKET_NAME, path:s3path)
                        s3Upload(bucket:env.PIPELINE_BUCKET_NAME, workingDir:'/scan-results/', path:s3path, includePathPattern:'**/*');
                    }
                    
                }
                
                
            }
        }

        stage('Trivy Secret Scan') {
            steps {
                script {
                    echo "Run Trivy GitHub Repo Scanner"
                    echo "Scanning on branch: ${GIT_BRANCH_LONG}"
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', passwordVariable: 'GITHUB_PAT', usernameVariable: 'DUMMY_USER')]) {
                        sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -e GITHUB_TOKEN=${GITHUB_PAT} aquasec/trivy repo github.com/AnikaSystems/cc-practice-apis --branch ${GIT_BRANCH_LONG} --scanners secret"
                    }
                }
            }
        }
    }
}
